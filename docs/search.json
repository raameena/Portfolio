[
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Building an AI-Powered Learning Assistant\n\n\nA full-stack application leveraging generative AI for homework help, with an integrated data science module to analyze and understand learning patterns. \n\n\n\nSoftware Engineering\n\n\nData Science\n\n\n\n\n\n\n\n\n\nJun 18, 2025\n\n\nRaameen Ahmed\n\n\n\n\n\n\n\n\n\n\n\n\nPersonal Webpage\n\n\nBuilding a fully custom Quarto × HTML × CSS × JavaScript portfolio \n\n\n\nRStudio\n\n\nFront-End\n\n\n\n\n\n\n\n\n\nJun 14, 2025\n\n\nRaameen Ahmed\n\n\n\n\n\n\n\n\n\n\n\n\nBirth Data Analysis\n\n\nBuilding an R × tidyverse × ggplot2 pipeline to model U.S. births (2016 – 2021) \n\n\n\nData Analysis\n\n\nData Modeling\n\n\n\n\n\n\n\n\n\nApr 10, 2025\n\n\nRaameen Ahmed, Muskan Ahmad, Malik Mustafa\n\n\n\n\n\n\n\n\n\n\n\n\nSearch System\n\n\nBuilding a C++ × STL × CLI engine for instant look-ups on all 50 U.S. states \n\n\n\nAlgorithms\n\n\nCommand-Line\n\n\n\n\n\n\n\n\n\nDec 10, 2024\n\n\nRaameen Ahmed\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/PersonalWebpage_Post/index.html",
    "href": "posts/PersonalWebpage_Post/index.html",
    "title": "Personal Webpage",
    "section": "",
    "text": "“This site is only the beginning, stay tuned for what’s next!”\nIn Summer 2025 I decided to challenge site-building AIs and build my own website. Although users these days primarily rely on tools such as WordPress to create their websites, I wanted to get in on some of the fun and try making it myself (with the help of YouTube, ChatGPT, and Gemini). Below is the stack, the lessons, and what else is in store."
  },
  {
    "objectID": "posts/PersonalWebpage_Post/index.html#why-roll-my-own-site",
    "href": "posts/PersonalWebpage_Post/index.html#why-roll-my-own-site",
    "title": "Personal Webpage",
    "section": "♡ Why roll my own site?",
    "text": "♡ Why roll my own site?\n\n\nShowcase front-end skills (not just content).\nHiring managers can view the source and see real code, not Wix widgets.\nEnd-to-end control over performance, accessibility & design.\nI choose the fonts, colours, and load-time budget.\nQuarto’s Markdown → HTML pipeline lets me write posts in plain text,\nrender once and host anywhere (GitHub Pages today, Netlify tomorrow)."
  },
  {
    "objectID": "posts/PersonalWebpage_Post/index.html#tech-stack",
    "href": "posts/PersonalWebpage_Post/index.html#tech-stack",
    "title": "Personal Webpage",
    "section": "♡ Tech stack",
    "text": "♡ Tech stack\n\n\n\n\n\n\n\n\nLayer\nChoices & Rationale\n\n\n\n\nSite generator\nQuarto 1.5 — auto listings, search, built-in light/dark theme toggle\n\n\nStyling\nCustom CSS — frosted cards, pink cursor glow, theme-aware colours\n\n\nSite generator\nquarto 0.9 › renders posts, listing, search\n\n\nStyling\nTailored CSS — glass-morphism cards, pink hover glows, three-layer banner\n\n\nInteractivity\nVanilla JavaScript (≈ 140 LoC)• word-hover script • cursor spotlight • image lightbox\n\n\nAssets\nAll images converted to WebP with ImageMagick (magick) and capped at 1600 px\n\n\nDev tools\nRStudio for QMD editing • VS Code for CSS/JS • Homebrew on macOS\n\n\nHosting\nGitHub Pages (gh-pages branch)"
  },
  {
    "objectID": "posts/PersonalWebpage_Post/index.html#code-data",
    "href": "posts/PersonalWebpage_Post/index.html#code-data",
    "title": "Personal Webpage",
    "section": "♡ Code & data",
    "text": "♡ Code & data\n\n\nGitHub Repository"
  },
  {
    "objectID": "posts/PersonalWebpage_Post/index.html#features",
    "href": "posts/PersonalWebpage_Post/index.html#features",
    "title": "Personal Webpage",
    "section": "♡ Features",
    "text": "♡ Features\n\n\nOne-click light / dark mode — theme switcher remembers your preference.\nAnimated banner — three translucent layers + radial spotlight that tracks\nthe cursor.\nWord-by-word hover — page headers and paragraphs bloom with a soft glow.\nGlass cards — posts and call-outs float above the background, zooming &\ntinting pink on hover.\nLightbox avatar — click my profile photo to view a full-size version,\ndismiss with one click.\nInstant search — Algolia Autocomplete powered, loads only on demand."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Raameen Ahmed",
    "section": "",
    "text": "Hello there! My name is Raameen and I am a Data Science at the University of Michigan - Dearborn. I am currently learning to use Quarto, CSS, JavaScript, and HTML through R studio to build the front end to my personal website. Make sure to check out my Projects page! ♡"
  },
  {
    "objectID": "posts/SearchSystem_Post/index.html",
    "href": "posts/SearchSystem_Post/index.html",
    "title": "Search System",
    "section": "",
    "text": "How do you find any fact about any state in one keystroke?\nMy very first C++ project: a lightweight, terminal-based search system that parses a 50-row CSV, indexes every field in memory, and serves O(log n) look-ups via binary search."
  },
  {
    "objectID": "posts/SearchSystem_Post/index.html#what-problem-does-it-solve",
    "href": "posts/SearchSystem_Post/index.html#what-problem-does-it-solve",
    "title": "Search System",
    "section": "♡ What problem does it solve?",
    "text": "♡ What problem does it solve?\n\n\nCentralises state facts.\nNo more scrolling through Wikipedia tables — query statehood year, capital, area or abbreviation from one prompt.\nTeaches core CS.\nHands-on practice with file-I/O, structs, vectors, sorting & searching algorithms.\nRuns everywhere.\nPure C++17, single executable, &lt; 100 KB binary."
  },
  {
    "objectID": "posts/SearchSystem_Post/index.html#tech-stack",
    "href": "posts/SearchSystem_Post/index.html#tech-stack",
    "title": "Search System",
    "section": "♡ Tech stack",
    "text": "♡ Tech stack\n\n\n\n\n\n\n\n\nLayer\nTools & Notes\n\n\n\n\nLanguage\nC++17 — modern features (auto, ranged-for, std::string_view)\n\n\nData model\nstruct State { … } stored in a std::vector\n\n\nIndexing\nPre-sorted by key, binary search via std::lower_bound\n\n\nParsing\nstd::ifstream + getline + std::stringstream\n\n\nBuild\ng++ -O2 search.cpp -o search (VS Code tasks.json)\n\n\nUX\nCommand-line prompts, coloured output with ANSI codes"
  },
  {
    "objectID": "posts/SearchSystem_Post/index.html#key-features",
    "href": "posts/SearchSystem_Post/index.html#key-features",
    "title": "Search System",
    "section": "♡ Key features",
    "text": "♡ Key features\n\n\nFlexible queries — select any column (name, capital, region, year…)\nand retrieve the row in under a millisecond.\nOptimised search — vector sorted at start-up; look-ups use std::binary_search() → O(log n).\nGraceful fallback — invalid keys return suggestions\n(Did you mean “MA” ?).\nScalable design — swap the CSV to 5 000 rows with zero code changes;\nRAM grows linearly."
  },
  {
    "objectID": "posts/SearchSystem_Post/index.html#sample-session",
    "href": "posts/SearchSystem_Post/index.html#sample-session",
    "title": "Search System",
    "section": "♡ Sample session",
    "text": "♡ Sample session\n\n$ ./search\n➜  Enter query type [state | capital | abbr | year]: state\n➜  Enter value: Michigan\n──────────────────────────────────────────────\nState:               Michigan (MI)\nCapital:             Lansing\nStatehood (year):    1837\nRegion:              Midwest\nArea (sq mi):        96 716\n──────────────────────────────────────────────"
  },
  {
    "objectID": "posts/SearchSystem_Post/index.html#code-data",
    "href": "posts/SearchSystem_Post/index.html#code-data",
    "title": "Search System",
    "section": "♡ Code & data",
    "text": "♡ Code & data\n\n\nGitHub Repository"
  },
  {
    "objectID": "posts/BirthDataAnalysis_Post/index.html",
    "href": "posts/BirthDataAnalysis_Post/index.html",
    "title": "Birth Data Analysis",
    "section": "",
    "text": "How maternal education shapes fertility patterns and infant health across the United States (2016 – 2021).\nWe stitched together 6 years of provisional NCHS records (≈ 20 M births), cleaned 1.2 GB of raw CSVs into a single tidy table, and fed it through a fully reproducible R × tidyverse workflow. The result is an interactive report that quantifies regional disparities, isolates key predictors, and pin-points policy levers for healthier outcomes."
  },
  {
    "objectID": "posts/BirthDataAnalysis_Post/index.html#research-questions",
    "href": "posts/BirthDataAnalysis_Post/index.html#research-questions",
    "title": "Birth Data Analysis",
    "section": "♡ Research questions",
    "text": "♡ Research questions\n\n\nEducation → birth outcomes\nHow does maternal schooling predict birth weight and maternal age across states and years?\nEducation → family size\nAre mothers with lower formal education more likely to have multiple children than highly-educated mothers?"
  },
  {
    "objectID": "posts/BirthDataAnalysis_Post/index.html#code-data",
    "href": "posts/BirthDataAnalysis_Post/index.html#code-data",
    "title": "Birth Data Analysis",
    "section": "♡ Code & data",
    "text": "♡ Code & data\n\n\nGitHub Repository\nKaggle dataset"
  },
  {
    "objectID": "posts/BirthDataAnalysis_Post/index.html#functions-methods",
    "href": "posts/BirthDataAnalysis_Post/index.html#functions-methods",
    "title": "Birth Data Analysis",
    "section": "♡ Functions & methods",
    "text": "♡ Functions & methods\n\n\n\n\n\n\n\n\nStage\nKey tools & notes\n\n\n\n\nCleaning / prep\nreadr::read_csv() · dplyr::mutate() / as_tibble() · na.omit()\n\n\nDescriptive stats\ngroup_by() + summarise() for year-by-state aggregates\n\n\nInferential stats\nOne-way ANOVA (aov) + linear / interaction models (lm)\n\n\nClassification\nLogistic glm predicting High_EDU (Bachelor’s +) from age & birth-weight\n\n\nVisualisation\nggplot2 bar / violin / scatter + facet_wrap() and geom_text_repel()"
  },
  {
    "objectID": "posts/BirthDataAnalysis_Post/index.html#headline-findings",
    "href": "posts/BirthDataAnalysis_Post/index.html#headline-findings",
    "title": "Birth Data Analysis",
    "section": "♡ Headline findings",
    "text": "♡ Headline findings\n\n\nEducation inversely tracks fertility.\nHigh-school-only and some college mothers account for most births, while PhD / MD holders delay childbirth and have fewer children overall.\nHigher education ⇒ healthier babies.\nEach jump in schooling adds ≈ 85 g to mean birth weight (p &lt; 0.001).\nAge amplifies the effect.\nIn the interaction model, every extra year of maternal age adds +41 g for PhD mothers but only +1 g for high-school drop-outs.\nRegional split.\nNew England & the West host the most college-educated, older mothers; the Deep South clusters at younger ages & lower schooling."
  },
  {
    "objectID": "posts/BirthDataAnalysis_Post/index.html#policy-take-aways",
    "href": "posts/BirthDataAnalysis_Post/index.html#policy-take-aways",
    "title": "Birth Data Analysis",
    "section": "♡ Policy take-aways",
    "text": "♡ Policy take-aways\n\n\nEducation is a lever.\nKeeping women in school correlates with later, healthier births.\nTarget by geography.\nSouthern states stand to gain most from prenatal-care subsidies and health-literacy programs.\nNext steps.\nAdd paternal education and local healthcare spend to explain the remaining variance."
  },
  {
    "objectID": "posts/BirthDataAnalysis_Post/index.html#full-report-pdf",
    "href": "posts/BirthDataAnalysis_Post/index.html#full-report-pdf",
    "title": "Birth Data Analysis",
    "section": "♡ Full report (PDF)",
    "text": "♡ Full report (PDF)"
  },
  {
    "objectID": "posts/AIHomeworkHelper_Post/index.html",
    "href": "posts/AIHomeworkHelper_Post/index.html",
    "title": "Building an AI-Powered Learning Assistant",
    "section": "",
    "text": "Goals: Learn to use Flask for APIs, Learn React for front end, Learn NumPys and Pandas to handle my data for my AI\nI currently do not know React and know very basic Python ( haven’t taken DSA yet but have been learning the concepts myself from YouTube and ChatGPT). However, I am taking two classes ( Calc 3 and Ethics ) and want to make a specialized AI myself that will make these classes ( and future classes ) less work.\n\n\nI predict it will take me about 1-2 months, but we shall see! I will record my progress down below, and then make a final post later on :)"
  },
  {
    "objectID": "posts/AIHomeworkHelper_Post/index.html#rough-ideas",
    "href": "posts/AIHomeworkHelper_Post/index.html#rough-ideas",
    "title": "In Progress: AI Homework Helper",
    "section": "♡ Rough Ideas",
    "text": "♡ Rough Ideas\n\nJune 18, 2025\nI will shortly begin working on an AI Homework Helper, I plan to integrate SWE and DS with this project. I will need to learn a lot abut how AIs function and behave along with back end logistics ( I’ve never worked with back end so bear with me ). I want to integrate ds by gathering input data and presenting them to the user ( their individual stats of some sort ) using pandas and numpy. This is still early ideas, I my change them with time."
  },
  {
    "objectID": "posts/AIHomeworkHelper_Post/index.html#updates",
    "href": "posts/AIHomeworkHelper_Post/index.html#updates",
    "title": "In Progress: AI Homework Helper",
    "section": "♡ Updates",
    "text": "♡ Updates\n\nJune 18, 2025\nI will shortly begin working on an AI Homework Helper, I plan to integrate SWE and DS with this project. I will need to learn a lot abut how AIs function and behave along with back end logistics ( I’ve never worked with back end so bear with me ). I want to integrate ds by gathering input data and presenting them to the user ( their individual stats of some sort ) using pandas and numpy. This is still early ideas, I my change them with time."
  },
  {
    "objectID": "posts/AIHomeworkHelper_Post/index.html#ai-functions",
    "href": "posts/AIHomeworkHelper_Post/index.html#ai-functions",
    "title": "In Progress: AI Homework Helper",
    "section": "♡ AI Functions",
    "text": "♡ AI Functions\n\n\nBe able to find quotes in pdfs that the user uploads\nGive the exact line, sentence number, or paragraph of said quote\nRecord frequency of topics the user asks questions on + display report\nRecord lengths of user’s inputs and accuracy of AI’s response ( ask user if answer was accurate ) -&gt; does longer input = more accurate response ?\nUse the data to tweak the AI to be more accurate"
  },
  {
    "objectID": "posts/AIHomeworkHelper_Post/index.html#project-blueprint",
    "href": "posts/AIHomeworkHelper_Post/index.html#project-blueprint",
    "title": "Building an AI-Powered Learning Assistant",
    "section": "♡ Project Blueprint",
    "text": "♡ Project Blueprint\n\nThis project is an exercise in both full-stack software engineering and applied data science. The architecture is designed to be modular, allowing for robust features and insightful analytics."
  },
  {
    "objectID": "posts/AIHomeworkHelper_Post/index.html#case-study-implementation",
    "href": "posts/AIHomeworkHelper_Post/index.html#case-study-implementation",
    "title": "Building an AI-Powered Learning Assistant",
    "section": "♡ Case Study & Implementation",
    "text": "♡ Case Study & Implementation\n\nThis section will be updated with detailed write-ups as major milestones are completed.\n\nMilestone 1: Backend API & Database Architecture\n(Details on setting up the Flask API, defining endpoints, and designing the PostgreSQL schema will go here…)\n\n\nMilestone 2: Core Frontend Development in React\n(Details on building the user interface components, managing state, and connecting to the backend API will go here…)\n\n\nMilestone 3: Data Analytics Module Implementation\n(Details on the data pipeline, SQL queries, Pandas transformations, and the creation of visualizations will go here…)"
  },
  {
    "objectID": "posts/AIHomeworkHelper_Post/index.html#current-status",
    "href": "posts/AIHomeworkHelper_Post/index.html#current-status",
    "title": "Building an AI-Powered Learning Assistant",
    "section": "♡ Current Status",
    "text": "♡ Current Status\n\n(As of June 18, 2025)\nThe project is in the initial planning and architecture phase. The primary focus is on defining the database schema and developing the core API endpoints for user interaction and PDF processing.\nNext Steps: 1. Implement the initial Flask application structure and database models. 2. Begin development of the primary React components for the user interface."
  },
  {
    "objectID": "posts/AIHomeworkHelper_Post/index.html#executive-summary",
    "href": "posts/AIHomeworkHelper_Post/index.html#executive-summary",
    "title": "Building an AI-Powered Learning Assistant",
    "section": "♡ Executive Summary",
    "text": "♡ Executive Summary\n\nHomework Helper AI is a full-stack application designed to assist students by leveraging large language models. Built with a Python/Flask backend and a React frontend, the project also features a comprehensive data science module that analyzes user query patterns in real-time to provide insights into learning behaviors. The goal is to create not just a helpful tool, but a system that learns about learning itself."
  },
  {
    "objectID": "posts/AIHomeworkHelper_Post/index.html#tech-stack",
    "href": "posts/AIHomeworkHelper_Post/index.html#tech-stack",
    "title": "Building an AI-Powered Learning Assistant",
    "section": "♡ Tech Stack",
    "text": "♡ Tech Stack\n\n\nFrontend: React, CSS3, HTML5\nBackend: Python, Flask\nDatabase: PostgreSQL (for storing user queries and application data)\nData Science: Pandas, NumPy, Scikit-learn, Plotly\nDeployment: Vercel (Frontend), Heroku/Render (Backend & Database)"
  },
  {
    "objectID": "posts/AIHomeworkHelper_Post/index.html#core-features-roadmap",
    "href": "posts/AIHomeworkHelper_Post/index.html#core-features-roadmap",
    "title": "Building an AI-Powered Learning Assistant",
    "section": "♡ Core Features & Roadmap",
    "text": "♡ Core Features & Roadmap\n\n\nAI-Powered PDF Analysis (SWE): Develop a backend service that allows users to upload PDF documents and ask questions about their content, receiving precise answers with source citations.\nUser Interaction Dashboard (SWE/DS): Create a user-facing dashboard that visualizes their personal usage statistics, such as most frequent topics and query history, using data processed by Pandas and visualized with a library like Plotly.\nUsage Analytics & Insight Engine (DS): Build an admin-facing analytics module to analyze aggregated, anonymized user data. The initial goal is to model the relationship between query characteristics (e.g., length, topic) and the AI’s response quality.\nPredictive Quality Monitoring (DS): Implement a user feedback mechanism (e.g., “was this answer helpful?”) to create a labeled dataset. Use this to train a Scikit-learn classification model that can predict a user’s satisfaction with an answer before they even rate it."
  }
]